name: Docker Deploy to Test Server

on:
  push:
    branches:
      - main
      - JIE

  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: Environment Server

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Build with Maven
        run: |
          cd backend
          mvn clean package -DskipTests
          mkdir -p ../app
          cp target/*.jar ../app/app.jar
          ls -l ../app/app.jar

      - name: Create .env from Secrets
        run: |
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" > backend/.env
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> backend/.env
          echo "SPRING_PROFILES_ACTIVE=test" >> backend/.env
          cat backend/.env   # ✅ 建議保留列印，方便 debug

      - name: Zip deploy files
        run: |
          mkdir -p deploy
          cp app/app.jar deploy/ || echo "⚠️ 缺少 app.jar"
          cp backend/.env deploy/ || echo "⚠️ 缺少 .env"
          cp backend/setup.sh deploy/ || echo "⚠️ 缺少 setup.sh"
          cp Dockerfile deploy/ || echo "⚠️ 缺少 Dockerfile"

          echo "📦 準備打包 deploy 資料夾內容："
          ls -lh deploy

          cd deploy
          if [ "$(ls -A .)" ]; then
            zip ../deploy.zip *
          else
            echo "❌ deploy 資料夾是空的，取消打包"
            exit 1
          fi

      - name: Upload deploy.zip to server
        uses: appleboy/scp-action@v0.1.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "deploy.zip"
          target: "/home/${{ secrets.SSH_USER }}/docker-app"

      - name: SSH - Unzip and Run Docker
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          password: ${{ secrets.SSH_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/${{ secrets.SSH_USER }}/docker-app
            unzip -o deploy.zip -d .
            chmod +x setup.sh
            ./setup.sh
            docker stop myapp || true
            docker rm myapp || true
            docker build -t myapp-image .
            docker run -d --name myapp --env-file .env -p 8080:8080 myapp-image
